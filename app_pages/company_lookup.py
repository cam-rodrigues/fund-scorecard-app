import streamlit as st
import requests
from bs4 import BeautifulSoup
from fpdf import FPDF
import os

def run():
    st.title("üîç Company Ticker Info Finder")

    ticker = st.text_input("Enter a stock ticker symbol (e.g. AAPL, TSLA, MSFT):").upper().strip()

    def get_company_name(ticker):
        try:
            url = f"https://finance.yahoo.com/quote/{ticker}"
            headers = {"User-Agent": "Mozilla/5.0"}
            res = requests.get(url, headers=headers, timeout=5)
            soup = BeautifulSoup(res.text, "html.parser")
            title_tag = soup.find("h1")
            if title_tag:
                name = title_tag.text.replace(f"({ticker})", "").strip()
                return name if name else f"{ticker} (Name not found)"
        except:
            pass
        return f"{ticker} (Name unavailable)"

    def get_links(ticker):
        links = {
            "Yahoo Finance": f"https://finance.yahoo.com/quote/{ticker}",
            "Google News": f"https://www.google.com/search?q={ticker}+stock&tbm=nws",
            "Seeking Alpha": f"https://seekingalpha.com/symbol/{ticker}",
            "SEC Filings": f"https://www.sec.gov/edgar/browse/?CIK={ticker}&owner=exclude"
        }
        try:
            headers = {"User-Agent": "Mozilla/5.0"}
            query = f"{ticker} investor relations"
            html = requests.get(f"https://www.google.com/search?q={query.replace(' ', '+')}", headers=headers).text
            soup = BeautifulSoup(html, "html.parser")
            anchors = soup.find_all("a")
            ir_links = [a["href"] for a in anchors if "/url?q=" in a["href"] and "investor" in a["href"]]
            if ir_links:
                links["Investor Relations"] = ir_links[0].split("/url?q=")[1].split("&")[0]
        except:
            pass
        return links

    @st.cache_data(show_spinner=False)
    def fetch_preview(url):
        try:
            headers = {"User-Agent": "Mozilla/5.0"}
            r = requests.get(url, timeout=4, headers=headers)
            soup = BeautifulSoup(r.text, "html.parser")
            desc = soup.find("meta", attrs={"name": "description"})
            return desc["content"].strip() if desc and desc.get("content") else None
        except:
            return None

    def generate_ai_summary(ticker, name):
        try:
            import openai
            prompt = f"Give a 3-4 sentence overview of the company {name} (ticker: {ticker}). Include industry, strengths, and typical investor considerations."
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=250,
                temperature=0.5
            )
            return response.choices[0].message.content.strip()
        except:
            return "AI summary unavailable at the moment."

    def generate_pdf(company_name, summary, links, previews):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=14)
        pdf.cell(200, 10, txt=f"{company_name} ‚Äî Company Info Summary", ln=True, align="C")
        pdf.ln(4)

        # Summary section
        pdf.set_font("Arial", size=11, style="B")
        pdf.cell(0, 10, "AI-Generated Company Summary:", ln=True)
        pdf.set_font("Arial", size=10)
        pdf.multi_cell(0, 8, summary)
        pdf.ln(2)

        # Links section
        pdf.set_font("Arial", size=11, style="B")
        pdf.cell(0, 10, "Key Resources:", ln=True)
        for name, url in links.items():
            pdf.set_font("Arial", size=10, style="B")
            pdf.multi_cell(0, 7, f"{name}: {url}")
            preview = previews.get(name)
            if preview:
                pdf.set_font("Arial", size=9)
                pdf.multi_cell(0, 6, preview)
            pdf.ln(1)

        # Footer
        pdf.set_y(-25)
        pdf.set_font("Arial", size=8)
        pdf.set_text_color(100)
        pdf.cell(0, 10, "Generated by FidSync ‚Ä¢ Not investment advice", ln=True, align="C")

        path = "/mnt/data/company_summary.pdf"
        pdf.output(path)
        return path

    if ticker:
        with st.spinner("Getting company name..."):
            company_name = get_company_name(ticker)

        st.markdown(f"### üîó Results for **{company_name}**")

        with st.spinner("Fetching key links and previews..."):
            links = get_links(ticker)
            previews = {name: fetch_preview(url) for name, url in links.items()}

        with st.spinner("Generating company summary..."):
            summary = generate_ai_summary(ticker, company_name)

        st.markdown("#### üß† AI Summary")
        st.success(summary)

        st.markdown("#### üîó Key Links")
        for name, url in links.items():
            st.markdown(f"**[{name}]({url})**")
            preview = previews.get(name)
            if preview:
                st.markdown(f"<div style='font-size: 0.9rem; color: gray'>{preview}</div>", unsafe_allow_html=True)
            st.markdown("---")

        if st.button("üìÑ Export to PDF"):
            pdf_path = generate_pdf(company_name, summary, links, previews)
            with open(pdf_path, "rb") as f:
                st.download_button("Download Company Summary PDF", f, file_name=f"{ticker}_summary.pdf", mime="application/pdf")
