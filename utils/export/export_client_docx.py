from docx import Document
from docx.shared import Pt, Inches
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from bs4 import BeautifulSoup
from datetime import datetime
import os

def add_html_to_doc(doc, html_text):
    soup = BeautifulSoup(html_text, "html.parser")
    for elem in soup.contents:
        if elem.name == "h3":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
            run.font.size = Pt(14)
        elif elem.name == "b":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
        elif elem.name == "em":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.italic = True
        elif elem.name == "ul":
            for li in elem.find_all("li"):
                doc.add_paragraph(li.get_text(), style='List Bullet')
        elif elem.name == "br":
            doc.add_paragraph("")
        elif elem.string and elem.string.strip():
            doc.add_paragraph(elem.string.strip())

def add_fidsync_header_footer(section, user="FidSync", logo_path=None):
    header = section.header
    header.paragraphs[0].text = f"Generated by FidSync | {datetime.now().strftime('%B %d, %Y')}"
    header.paragraphs[0].style.font.size = Pt(9)

    footer = section.footer
    footer_paragraph = footer.paragraphs[0]
    footer_paragraph.text = "This proposal was generated automatically by FidSync and should be reviewed manually before being shared with clients."
    footer_paragraph.style.font.size = Pt(8)

    # Page number (centered)
    sectPr = section._sectPr
    pgNumType = OxmlElement('w:pgNumType')
    sectPr.append(pgNumType)

def export_client_docx(df, proposal_html, buffer, user="FidSync", logo_path=None):
    doc = Document()

    # Set default font
    font = doc.styles['Normal'].font
    font.name = "Times New Roman"
    font.size = Pt(11)

    section = doc.sections[0]
    add_fidsync_header_footer(section, user=user, logo_path=logo_path)

    # Title
    doc.add_paragraph("Client Proposal", style="Title")
    doc.add_paragraph("Proposal Summary", style="Heading 1")

    # Add proposal content
    add_html_to_doc(doc, proposal_html)

    # Add table
    trailing_cols = ["QTD", "YTD", "1 Yr", "3 Yr", "5 Yr", "10 Yr", "Volatility (%)", "Sharpe Ratio"]
    table = doc.add_table(rows=1, cols=len(trailing_cols) + 1)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = "Fund"
    for i, col in enumerate(trailing_cols):
        hdr_cells[i+1].text = col

    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        row_cells[0].text = str(row["Fund"])
        for i, col in enumerate(trailing_cols):
            val = row.get(col)
            row_cells[i+1].text = f"{val:.2f}" if isinstance(val, (float, int)) else str(val)

    doc.save(buffer)
