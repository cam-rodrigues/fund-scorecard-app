from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from datetime import datetime
from io import BytesIO
from docx.shared import RGBColor


def export_internal_docx(df, proposal_html, buffer: BytesIO):
    document = Document()

    # === Set Up Header with Logo and Timestamp ===
    section = document.sections[0]
    header = section.header
    header_table = header.add_table(rows=1, cols=2)
    header_table.autofit = True
    hdr_cells = header_table.rows[0].cells

    # Logo on the left
    logo_path = "assets/logo.png"  # Must exist
    try:
        run = hdr_cells[0].paragraphs[0].add_run()
        run.add_picture(logo_path, width=Inches(1.2))
    except:
        hdr_cells[0].text = "FidSync"

    # Right-aligned timestamp
    date_str = datetime.today().strftime("%B %d, %Y")
    hdr_cells[1].paragraphs[0].add_run(f"Generated by FidSync\n{date_str}").font.size = Pt(10)
    hdr_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    # === Title ===
    title = document.add_paragraph()
    title_run = title.add_run("Internal Proposal Report")
    title_run.font.size = Pt(18)
    title_run.bold = True
    title_run.font.color.rgb = RGBColor(0, 32, 96)
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    document.add_paragraph()

    # === Scorecard Table ===
    document.add_paragraph("Fund Performance Scorecard:", style="Heading 2")
    table = document.add_table(rows=1, cols=len(df.columns), style="Light List Accent 1")
    table.autofit = True
    hdr_cells = table.rows[0].cells
    for i, col in enumerate(df.columns):
        hdr_cells[i].text = col

    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        for i, val in enumerate(row):
            row_cells[i].text = str(round(val, 2)) if isinstance(val, float) else str(val)

    document.add_paragraph()

    # === Proposal Section ===
    document.add_paragraph("Proposal Narrative:", style="Heading 2")
    proposal_paragraph = document.add_paragraph()
    proposal_paragraph.add_run(strip_html(proposal_html))

    document.add_paragraph()

    # === Disclaimer ===
    disclaimer = document.add_paragraph()
    disclaimer.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    disclaimer_run = disclaimer.add_run(
        "\nDisclaimer: This proposal was generated automatically by FidSync and should be manually reviewed for accuracy and completeness."
    )
    disclaimer_run.font.size = Pt(8)
    disclaimer_run.font.italic = True
    disclaimer_run.font.color.rgb = RGBColor(90, 90, 90)

    # === Footer with Page Numbers ===
    footer = section.footer
    paragraph = footer.paragraphs[0]
    paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = paragraph.add_run()
    fldChar1 = OxmlElement("w:fldChar")
    fldChar1.set(qn("w:fldCharType"), "begin")
    instrText = OxmlElement("w:instrText")
    instrText.text = "PAGE"
    fldChar2 = OxmlElement("w:fldChar")
    fldChar2.set(qn("w:fldCharType"), "end")
    run._r.append(fldChar1)
    run._r.append(instrText)
    run._r.append(fldChar2)

    # === Save to Buffer ===
    document.save(buffer)


def strip_html(html):
    import re
    clean = re.compile('<.*?>')
    return re.sub(clean, '', html)
