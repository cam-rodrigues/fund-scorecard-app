from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from datetime import datetime
from io import BytesIO
import os
import re


def strip_html_tags(html):
    return re.sub(r"<.*?>", "", html)


def export_internal_docx(df, proposal_html, buffer: BytesIO):
    document = Document()

    # === Page Setup ===
    section = document.sections[0]
    width = section.page_width - section.left_margin - section.right_margin

    # === Header with Logo and Date ===
    header = section.header
    header_table = header._element.xpath('.//w:tbl')
    if not header_table:
        header_table = header.add_table(rows=1, cols=2, width=width)
    else:
        header_table = header.tables[0]
    header_table.autofit = True
    hdr_cells = header_table.rows[0].cells

    # Logo (Left Cell)
    logo_path = "media/fidsync_logo.png"
    try:
        run = hdr_cells[0].paragraphs[0].add_run()
        run.add_picture(logo_path, width=Inches(1.5))
    except:
        hdr_cells[0].text = "FidSync"

    # Date + Generated Info (Right Cell)
    right_para = hdr_cells[1].paragraphs[0]
    right_para.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    run = right_para.add_run(f"Generated by FidSync\n{datetime.now().strftime('%B %d, %Y')}")
    run.font.size = Pt(10)
    run.font.italic = True

    # === Title ===
    title = document.add_paragraph("Internal Proposal Report")
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = title.runs[0]
    run.font.size = Pt(18)
    run.font.bold = True
    run.font.color.rgb = RGBColor(0, 32, 96)

    document.add_paragraph()

    # === Scorecard Table ===
    document.add_paragraph("Fund Performance Scorecard", style="Heading 2")
    table = document.add_table(rows=1, cols=len(df.columns), style="Table Grid")
    hdr_cells = table.rows[0].cells
    for i, col in enumerate(df.columns):
        hdr_cells[i].text = str(col)

    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        for i, val in enumerate(row):
            row_cells[i].text = f"{val:.2f}" if isinstance(val, float) else str(val)

    document.add_paragraph()

    # === Proposal Summary ===
    document.add_paragraph("Proposal Summary", style="Heading 2")
    cleaned_text = strip_html_tags(proposal_html)
    document.add_paragraph(cleaned_text)

    # === Disclaimer ===
    disclaimer = document.add_paragraph()
    disclaimer.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = disclaimer.add_run(
        "\nThis document was automatically generated by FidSync and should be manually reviewed for accuracy before client presentation."
    )
    run.font.size = Pt(8)
    run.font.italic = True
    run.font.color.rgb = RGBColor(100, 100, 100)

    # === Footer with Page Number ===
    footer = section.footer
    paragraph = footer.paragraphs[0]
    paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = paragraph.add_run()
    fldChar1 = OxmlElement("w:fldChar")
    fldChar1.set(qn("w:fldCharType"), "begin")
    instrText = OxmlElement("w:instrText")
    instrText.text = "PAGE"
    fldChar2 = OxmlElement("w:fldChar")
    fldChar2.set(qn("w:fldCharType"), "end")
    run._r.append(fldChar1)
    run._r.append(instrText)
    run._r.append(fldChar2)

    # Save to buffer
    document.save(buffer)
