from docx import Document
from docx.shared import Pt, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from datetime import datetime
from io import BytesIO
from bs4 import BeautifulSoup
from docx.oxml import OxmlElement
from docx.oxml.ns import qn

def add_header_footer(doc):
    section = doc.sections[0]
    header = section.header
    footer = section.footer

    header_para = header.paragraphs[0] if header.paragraphs else header.add_paragraph()
    header_para.text = f"Generated by FidSync | {datetime.now().strftime('%B %d, %Y')}"
    header_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT

    footer_para = footer.paragraphs[0] if footer.paragraphs else footer.add_paragraph()
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

    run = footer_para.add_run()
    fldChar1 = OxmlElement("w:fldChar")
    fldChar1.set(qn("w:fldCharType"), "begin")

    instrText = OxmlElement("w:instrText")
    instrText.set(qn("xml:space"), "preserve")
    instrText.text = "PAGE"

    fldChar2 = OxmlElement("w:fldChar")
    fldChar2.set(qn("w:fldCharType"), "end")

    run._r.append(fldChar1)
    run._r.append(instrText)
    run._r.append(fldChar2)

def add_html_paragraphs(doc, html_text):
    soup = BeautifulSoup(html_text, "html.parser")
    for elem in soup.contents:
        if elem.name == "h3":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
            run.font.size = Pt(14)
        elif elem.name == "b":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
        elif elem.name == "em":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.italic = True
        elif elem.name == "ul":
            for li in elem.find_all("li"):
                doc.add_paragraph(li.get_text(), style='List Bullet')
        elif elem.name == "br":
            doc.add_paragraph("")
        elif elem.string and elem.string.strip():
            doc.add_paragraph(elem.string.strip())

def export_internal_docx_fancy(df, proposal_text, output_buffer):
    doc = Document()
    font = doc.styles['Normal'].font
    font.name = "Times New Roman"
    font.size = Pt(12)

    add_header_footer(doc)

    doc.add_paragraph("Internal Proposal", style="Title")
    doc.add_paragraph("Detailed analysis based on current fund data and benchmark comparisons.\n")

    add_html_paragraphs(doc, proposal_text)

    doc.add_paragraph("\nFund Data", style="Heading 2")

    # === Define column structure ===
    trailing_cols = ["QTD", "YTD", "1 Yr", "3 Yr", "5 Yr", "10 Yr", "Volatility (%)", "Sharpe Ratio"]
    cols = ["Fund"] + trailing_cols
    df = df[cols]

    # === Add Table with explicit width (avoids error) ===
    table = doc.add_table(rows=1, cols=len(cols), width=Inches(6.5))
    table.style = 'Table Grid'

    hdr_cells = table.rows[0].cells
    for i, col in enumerate(cols):
        hdr_cells[i].text = col

    for _, row in df.iterrows():
        cells = table.add_row().cells
        for i, val in enumerate(row):
            cells[i].text = str(val)

    doc.add_paragraph()
    disclaimer = doc.add_paragraph("This document was generated automatically using FidSync and should be reviewed for accuracy before distribution.")
    disclaimer.style = "Intense Quote"

    doc.save(output_buffer)
    output_buffer.seek(0)
