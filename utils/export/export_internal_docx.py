from docx import Document
from docx.shared import Pt, Inches
from docx.oxml.ns import qn
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from datetime import datetime
from bs4 import BeautifulSoup

def add_clean_html_paragraphs(doc, html_text):
    soup = BeautifulSoup(html_text, "html.parser")
    for elem in soup.contents:
        if elem.name == "h3":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
            run.font.size = Pt(14)
        elif elem.name == "b":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
        elif elem.name == "em":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.italic = True
        elif elem.name == "ul":
            for li in elem.find_all("li"):
                doc.add_paragraph(li.get_text(), style="List Bullet")
        elif elem.name == "br":
            doc.add_paragraph("")
        elif elem.string and elem.string.strip():
            doc.add_paragraph(elem.string.strip())

def export_internal_docx(df, proposal_text, buffer):
    doc = Document()

    # --- Document Styling ---
    font = doc.styles["Normal"].font
    font.name = "Times New Roman"
    font.size = Pt(11)

    # --- Header ---
    section = doc.sections[0]
    header = section.header
    header_para = header.paragraphs[0]
    header_para.text = f"Generated by FidSync â€¢ {datetime.today().strftime('%B %d, %Y')}"
    header_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # --- Title ---
    doc.add_paragraph("Internal Proposal", style="Title")
    doc.add_paragraph("Detailed Analysis\n")

    # --- Proposal HTML Conversion ---
    add_clean_html_paragraphs(doc, proposal_text)

    # --- Fund Data Table ---
    doc.add_paragraph("\nFund Performance Data:")
    trailing_cols = ["QTD", "YTD", "1 Yr", "3 Yr", "5 Yr", "10 Yr", "Volatility (%)", "Sharpe Ratio"]
    all_cols = ["Fund"] + trailing_cols
    table = doc.add_table(rows=1, cols=len(all_cols))
    table.style = "Table Grid"

    hdr_cells = table.rows[0].cells
    for i, col in enumerate(all_cols):
        hdr_cells[i].text = col

    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        row_cells[0].text = str(row["Fund"])
        for i, col in enumerate(trailing_cols, start=1):
            row_cells[i].text = f"{row[col]:.2f}"

    # --- Footer Disclaimer ---
    doc.add_paragraph("\nThis proposal was generated automatically by FidSync and should be reviewed manually for accuracy before distribution.").italic = True

    # --- Save to BytesIO buffer ---
    doc.save(buffer)
