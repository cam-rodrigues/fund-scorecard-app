from docx import Document
from docx.shared import Pt, Inches
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.section import WD_SECTION
from datetime import datetime
from bs4 import BeautifulSoup
import pandas as pd


def add_header_footer(doc):
    section = doc.sections[0]
    header = section.header
    footer = section.footer

    # === HEADER: "Generated by FidSync | Date" ===
    header_paragraph = header.paragraphs[0]
    header_paragraph.text = f"Generated by FidSync | {datetime.now().strftime('%B %d, %Y')}"
    header_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT

    # === FOOTER: Page Numbers ===
    footer_paragraph = footer.paragraphs[0]
    footer_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Add page number field
    fldChar1 = OxmlElement('w:fldChar')
    fldChar1.set(qn('w:fldCharType'), 'begin')

    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = "PAGE"

    fldChar2 = OxmlElement('w:fldChar')
    fldChar2.set(qn('w:fldCharType'), 'end')

    r1 = footer_paragraph.add_run()
    r1._r.append(fldChar1)
    r1._r.append(instrText)
    r1._r.append(fldChar2)


def add_clean_html_paragraphs(doc, html_text):
    soup = BeautifulSoup(html_text, "html.parser")
    for elem in soup.contents:
        if elem.name == "h3":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
            run.font.size = Pt(14)
        elif elem.name == "b":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.bold = True
        elif elem.name == "em":
            para = doc.add_paragraph()
            run = para.add_run(elem.get_text())
            run.italic = True
        elif elem.name == "ul":
            for li in elem.find_all("li"):
                doc.add_paragraph(li.get_text(), style='List Bullet')
        elif elem.name == "br":
            doc.add_paragraph("")
        elif elem.string and elem.string.strip():
            doc.add_paragraph(elem.string.strip())


def add_scorecard_table(doc, df):
    if isinstance(df, pd.DataFrame):
        df = df.copy()
    else:
        raise ValueError("Expected a DataFrame for the scorecard table.")

    doc.add_paragraph("Scorecard", style="Heading 1")

    df.insert(0, "Fund", df.pop("Fund"))  # Make sure Fund is first

    table = doc.add_table(rows=1, cols=len(df.columns))
    table.style = 'Table Grid'
    table.autofit = True

    hdr_cells = table.rows[0].cells
    for i, col in enumerate(df.columns):
        hdr_cells[i].text = str(col)

    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        for i, val in enumerate(row):
            row_cells[i].text = str(val)


def export_internal_docx_fancy(df, proposal_text, file_obj):
    doc = Document()
    style = doc.styles['Normal'].font
    style.name = 'Times New Roman'
    style.size = Pt(11)

    doc.add_paragraph("Internal Proposal", style="Title")
    doc.add_paragraph("Detailed Analysis\n")

    add_clean_html_paragraphs(doc, proposal_text)
    doc.add_paragraph("")  # Spacer
    add_scorecard_table(doc, df)

    doc.add_paragraph("\n\n---\n")
    doc.add_paragraph(
        "This document was generated automatically by FidSync and should be reviewed by a qualified advisor before use.",
        style='Normal'
    )

    add_header_footer(doc)
    doc.save(file_obj)
