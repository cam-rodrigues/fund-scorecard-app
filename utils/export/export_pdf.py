from reportlab.lib.pagesizes import LETTER
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER
from reportlab.lib.units import inch
from reportlab.lib import colors
from bs4 import BeautifulSoup
from datetime import datetime
import re

def markdown_to_html(text):
    text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)  # bold
    text = re.sub(r"\*(.+?)\*", r"<i>\1</i>", text)       # italic
    text = text.replace("\n", "<br/>")
    return text

def export_pdf(summary, proposal_html, buffer):
    doc = SimpleDocTemplate(buffer, pagesize=LETTER, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    styles = getSampleStyleSheet()

    # Custom styles
    title_style = ParagraphStyle(name="Title", fontSize=18, leading=22, alignment=TA_CENTER, spaceAfter=20)
    body_style = ParagraphStyle(name="Body", fontSize=11, leading=14, spaceAfter=6)
    heading_style = ParagraphStyle(name="Heading", fontSize=13, leading=16, spaceAfter=10, spaceBefore=12)

    elements = []

    # === Title + Date ===
    elements.append(Paragraph("Client Proposal", title_style))
    elements.append(Paragraph(f"Generated by FidSync • {datetime.today().strftime('%B %d, %Y')}", body_style))
    elements.append(Spacer(1, 12))

    # === Summary ===
    elements.append(Paragraph("Performance Summary", heading_style))
    for line in summary.strip().split("\n"):
        if line.strip():
            html_line = markdown_to_html(line.strip())
            elements.append(Paragraph(html_line, body_style))

    elements.append(Spacer(1, 16))

    # === Proposal Section ===
    elements.append(Paragraph("Proposal Recommendation", heading_style))
    soup = BeautifulSoup(proposal_html, "html.parser")

    for elem in soup.contents:
        if elem.name == "h3":
            elements.append(Paragraph(f"<b>{elem.get_text()}</b>", heading_style))
        elif elem.name == "b":
            elements.append(Paragraph(f"<b>{elem.get_text()}</b>", body_style))
        elif elem.name == "em":
            elements.append(Paragraph(f"<i>{elem.get_text()}</i>", body_style))
        elif elem.name == "ul":
            for li in elem.find_all("li"):
                elements.append(Paragraph("• " + li.get_text(), body_style))
        elif elem.name == "br":
            elements.append(Spacer(1, 6))
        elif elem.string and elem.string.strip():
            elements.append(Paragraph(elem.string.strip(), body_style))

    # === Disclaimer ===
    elements.append(Spacer(1, 24))
    disclaimer = "This proposal was generated automatically by FidSync and should be reviewed manually before use."
    elements.append(Paragraph(f"<i>{disclaimer}</i>", body_style))

    doc.build(elements)
